{{QBDLDATE:02-23-2025}}
{{QBDLTIME:17:40:57}}
{{DISPLAYTITLE: _CRC32}}
The '''_CRC32''' function returns the [[Wikipedia:Cyclic redundancy check|Crc-32]] checksum of any arbitrary string.


{{PageSyntax}}
: {{Parameter|chksum~&}} = [[_CRC32]]({{Parameter|dataString$}})


{{PageParameters}}
* {{Parameter|chksum~&}} is the [[_UNSIGNED]] [[LONG]] checksum returned (''zero(0)'', if the given {{Parameter|dataString$}} was empty).
* {{Parameter|dataString$}} is any literal or variable [[STRING]] to build the checksum from.


{{PageDescription}}
* The '''Crc-32''' checksum algorithm is slower than [[_ADLER32]] but is usually more resistant against random collisions, it has the following known properties:
** All single bit flips will be detected.
** All double bit flips will be detected.
** All 32-bit bursts of errors will be detected.
** Has a hamming distance of 4 for data lengths up to 91706 bytes.
** Has a hamming distance of 5 for data lengths up to 2974 bytes.
* For more informations have a closer look at [https://www.intel.com/content/www/us/en/content-details/709921/intel-quickassist-technology-intel-qat-using-adler-32-checksum-and-crc32-hash-to-ensure-data-compression-integrity.html Chapters 5-7 here].


{{PageAvailability}}
<!-- QB64 = a version or none, QBPE = a version or all, Platforms = yes or no -->
<gallery widths="48px" heights="48px" mode="nolines">
File:Qb64.png|'''none'''
File:Qbpe.png|'''v3.12.0'''
File:Apix.png
File:Win.png|'''yes'''
File:Lnx.png|'''yes'''
File:Osx.png|'''yes'''
</gallery>
<!-- additional availability notes go below here -->


{{PageExamples}}
;Example: Showing how the Crc-32 checksum can detect differences in two strings.
{{CodeStart}}
{{Text|<nowiki>'this is the correct text</nowiki>|#919191}}
t$ = {{Text|<nowiki>"QB64 Phoenix Edition"</nowiki>|#FFB100}}
{{Cl|PRINT}} {{Text|<nowiki>"Correct Text: "</nowiki>|#FFB100}}; t$
{{Cl|PRINT}} {{Text|<nowiki>"  Crc-32 Sum: "</nowiki>|#FFB100}}; {{Cl|RIGHT$}}({{Text|<nowiki>"00000000"</nowiki>|#FFB100}} + {{Cl|HEX$}}({{Cl|_CRC32}}(t$)), {{Text|8|#F580B1}})
{{Cl|PRINT}}
{{Text|<nowiki>'this text differs in just 1 bit from the above, by changing 4 to 5</nowiki>|#919191}}
{{Text|<nowiki>'ASC("4") = 52 = &B00110100</nowiki>|#919191}}
{{Text|<nowiki>'ASC("5") = 53 = &B00110101</nowiki>|#919191}}
t$ = {{Text|<nowiki>"QB65 Phoenix Edition"</nowiki>|#FFB100}}
{{Cl|PRINT}} {{Text|<nowiki>"Mangled Text: "</nowiki>|#FFB100}}; t$
{{Cl|PRINT}} {{Text|<nowiki>"  Crc-32 Sum: "</nowiki>|#FFB100}}; {{Cl|RIGHT$}}({{Text|<nowiki>"00000000"</nowiki>|#FFB100}} + {{Cl|HEX$}}({{Cl|_CRC32}}(t$)), {{Text|8|#F580B1}})
{{Cl|END}}
{{CodeEnd}}
{{Small|Example by RhoSigma}}
{{OutputStart}}
Correct Text: QB64 Phoenix Edition
  Crc-32 Sum: 691EE005

Mangled Text: QB65 Phoenix Edition
  Crc-32 Sum: EEB82B46
{{OutputEnd}}


{{PageSeeAlso}}
* [https://qb64phoenix.com/forum/showthread.php?tid=2681 Featured in our "Keyword of the Day" series]
* [[_DEFLATE$]], [[_INFLATE$]]
* [[_ADLER32]], [[_MD5$]]


{{PageNavigation}}
