{{QBDLDATE:02-23-2025}}
{{QBDLTIME:17:41:39}}
{{DISPLAYTITLE:_IIF}}
The '''_IIF''' function is a conditional operator-like feature allowing conditional evaluations with short-circuiting behavior.


{{PageSyntax}}
: {{Parameter|result}} = [[_IIF]]({{Parameter|expression}}, {{Parameter|truePart}}, {{Parameter|falsePart}})


{{PageParameters}}
* {{Parameter|expression}} is a condition that evaluates to a logical value (true or false).
* {{Parameter|truePart}} is the value or expression returned when {{Parameter|expression}} evaluates to true.
* {{Parameter|falsePart}} is the value or expression returned when {{Parameter|expression}} evaluates to false.


{{PageDescription}}
* The '''_IIF''' function provides a way to perform conditional evaluations, similar to the ternary operator in C ''(condition ? truePart : falsePart)''.
* It ensures short-circuiting, meaning only the relevant branch ({{Parameter|truePart}} or {{Parameter|falsePart}}) is evaluated based on the condition.
* Since only the {{Parameter|truePart}} or {{Parameter|falsePart}} is evaluated, it ensures optimal performance and avoids unnecessary computation, as any procedures involved in the skipped branch are '''not called''', be aware of this behavior.
* The return type is determined by the type of {{Parameter|truePart}}.
* Mixing [[STRING]] with other data types in {{Parameter|truePart}} and {{Parameter|falsePart}} is not allowed.
* It allows inline evaluations, improving readability, and reducing the need for verbose [[IF]]...[[THEN]]...[[ELSE]] structures.
* A compiler error is thrown if {{Parameter|expression}} cannot be evaluated as a boolean.


{{PageAvailability}}
<!-- QB64 = a version or none, QBPE = a version or all, Platforms = yes or no -->
<gallery widths="48px" heights="48px" mode="nolines">
File:Qb64.png|'''none'''
File:Qbpe.png|'''v4.0.0'''
File:Apix.png
File:Win.png|'''yes'''
File:Lnx.png|'''yes'''
File:Osx.png|'''yes'''
</gallery>
<!-- additional availability notes go below here -->


{{PageExamples}}
; Example 1:Basic conditional evaluation.
{{CodeStart}}
{{Cl|DIM}} userInput {{Cl|AS}} {{Cl|INTEGER}}
{{Cl|DIM}} result {{Cl|AS}} {{Cl|STRING}}

{{Cl|PRINT}} {{Text|<nowiki>"Enter a number:"</nowiki>|#FFB100}}
{{Cl|INPUT}} userInput

result = {{Cl|_IIF}}(userInput {{Cl|MOD}} {{Text|2|#F580B1}} = {{Text|0|#F580B1}}, {{Text|<nowiki>"Even"</nowiki>|#FFB100}}, {{Text|<nowiki>"Odd"</nowiki>|#FFB100}})
{{Cl|PRINT}} {{Text|<nowiki>"The number is "</nowiki>|#FFB100}}; result
{{CodeEnd}}
{{OutputStart}}
Enter a number:
5
The number is Odd
{{OutputEnd}}

----

; Example 2:Using numeric expressions.
{{CodeStart}}
{{Cl|DIM}} x {{Cl|AS}} {{Cl|INTEGER}}, y {{Cl|AS}} {{Cl|INTEGER}}
{{Cl|DIM}} max {{Cl|AS}} {{Cl|INTEGER}}

{{Cl|PRINT}} {{Text|<nowiki>"Enter the first number:"</nowiki>|#FFB100}}
{{Cl|INPUT}} x
{{Cl|PRINT}} {{Text|<nowiki>"Enter the second number:"</nowiki>|#FFB100}}
{{Cl|INPUT}} y

max = {{Cl|_IIF}}(x > y, x, y)
{{Cl|PRINT}} {{Text|<nowiki>"The larger number is: "</nowiki>|#FFB100}}; max
{{CodeEnd}}
{{OutputStart}}
Enter the first number:
10
Enter the second number:
20
The larger number is: 20
{{OutputEnd}}

----

; Example 3:Preventing unnecessary evaluation.
{{CodeStart}}
{{Cl|DIM}} a {{Cl|AS}} {{Cl|INTEGER}}, b {{Cl|AS}} {{Cl|SINGLE}}

{{Cl|PRINT}} {{Text|<nowiki>"Enter a non-zero number:"</nowiki>|#FFB100}}
{{Cl|INPUT}} a

b = {{Cl|_IIF}}(a <> {{Text|0|#F580B1}}, {{Text|100|#F580B1}} / a, {{Text|0|#F580B1}}) {{Text|<nowiki>' Avoids division by zero when a = 0</nowiki>|#919191}}
{{Cl|PRINT}} {{Text|<nowiki>"Result: "</nowiki>|#FFB100}}; b
{{CodeEnd}}
{{OutputStart}}
Enter a non-zero number:
0
Result: 0
{{OutputEnd}}


{{PageSeeAlso}}
* [[IF...THEN]]
* [[SELECT CASE]]
* [[_NEGATE]], [[_ANDALSO]], [[_ORELSE]]
* [[Boolean]]


{{PageNavigation}}
