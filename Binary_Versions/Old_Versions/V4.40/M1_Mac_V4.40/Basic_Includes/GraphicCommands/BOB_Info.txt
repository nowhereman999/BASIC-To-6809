My BASIC Sprite commands:


' compileoptions -fArcade_B0_F1 -k -b1
SPRITE_LOAD "KnightBig.asm",0 ' Load compiled sprite 0
10 GMODE 136,2
20 GMODE 136,1
30 GCLS 0
40 SCREEN 1,1 ' Go into graphics mode
50 for x=1 to 1000:set(rndz(255),rndz(191),rndz(15)):next x ' Make some dots on screen
'55 A=25:LINE(0,90)-(255,108),1,BF    ' Fill Box
'58 LOADM"AXEBKG.BIN",&HE00 ' Load the background in to video RAM @ $E00
60 GCOPY 1,2 ' Copy screen 1 to screen 2, needed for double buffering/doing sprites
x=0
Frame=0
80 SPRITE LOCATE 0,x,y
90 SPRITE BACK 0 ' save the background behind sprite 0
110 SPRITE ERASE 0 ' Erases Sprite #0
115 SPRITE SHOW 0, 0 'Frame ' Displays Sprite #0, showing image frame
120 WAIT VBL    ' Update all the sprite changes and show them on the screen
Frame=Frame+1
if Frame=4 then Frame=0
x=x-1
y=y+1
if y=192-16 then y=0
'if x>224-8 then x=0
if x<0 then x=224-8
' sleep 150
SPRITE ERASE 0
goto 80





' compileoptions -fArcade_B0_F1 -k




10 SPRITE_LOAD "Slime_8x8x4.asm",0 ' Load compiled sprite 0
20 GMODE 16,2 ' Reserve 2 graphics screens, the sprite handler needs two screen
25 GMODE 16,1 ' Make screen 1 the active one
30 GCLS 0  ' Clear screen
40 SCREEN 1,1 ' Go into graphics mode
50 for x=1 to 200:set(rnd(127)-1,rnd(63)-1,1):next x ' Make some dots on screen
' 55 A=25:LINE(0,38)-(127,191),3,BF    ' Fill Box
60 GCOPY 1,2 ' Copy screen 1 to screen 2 , sprite restore by copying from screen 2 to screen 1

x=0:c=0:d=1
Frame=2
80 SPRITE LOCATE 0,x,30
90 SPRITE BACK 0 ' save the background behind sprite 0
'110 SPRITE ERASE 0 ' Erases Sprite #0
115 SPRITE SHOW 0, Frame ' Displays Sprite #0, showing image frame
120 WAIT VBL    ' Update all the sprite changes and show them on the screen
Frame=Frame+1
if Frame=4 then Frame=0
c=c+1:if c=4 then x=x+d:c=0
if x<0 then x=0:d=d*-1
if x>64-8 then x=64-8:d=d*-1
sleep 150
SPRITE ERASE 0
goto 80
DoExplosion:
sprite locate 1,x+16,30
333 ' check this
    sprite back 1
For E=0 to 7
    sprite show 1,E ' Displays Sprite #1, showing image E
    wait vbl
    sprite erase 1
    sleep 200
next E
return



üé® BOB (Blitter Object) Commands

AMOS uses Bobs for smooth, flexible sprite-like animations. The following commands help load, display, move, and manipulate Bobs.

1Ô∏è‚É£ Initializing and Managing Bobs
	‚Ä¢	BOB ON
‚Üí Enables Bob handling. This must be used before drawing Bobs.
	‚Ä¢	BOB OFF
‚Üí Disables Bob processing, freeing up system resources.
	‚Ä¢	BOB CLEAR
‚Üí Clears all Bobs from memory.
	‚Ä¢	BOB STOP
‚Üí Temporarily disables Bobs without deleting them.
	‚Ä¢	BOB UPDATE
‚Üí Forces an immediate update of all Bobs on the screen.

2Ô∏è‚É£ Creating and Controlling Bobs
	‚Ä¢	BOB n, x, y, image [,mask]
‚Üí Displays Bob #n at (x, y), using image from a loaded .ABK file.
Example:
BOB 1, 100, 100, 0  ' Bob #1 at (100,100) using image 0

	‚Ä¢	BOB IMAGE n, image
‚Üí Changes the image of Bob #n (for animation).
Example:
FOR i = 0 TO 3
    BOB IMAGE 1, i   ' Cycle through 4 images
    WAIT VBL
NEXT i

	‚Ä¢	BOB X(n) = value
‚Üí Moves Bob #n to the specified X position.
	‚Ä¢	BOB Y(n) = value
‚Üí Moves Bob #n to the specified Y position.
	‚Ä¢	BOB COPY n, newn
‚Üí Copies Bob #n to a new Bob #newn.

3Ô∏è‚É£ Detecting Collisions
	‚Ä¢	BOB HIT(n)
‚Üí Returns -1 if Bob #n collides with another Bob.
Example:
IF BOB HIT(1) THEN PRINT "Collision detected!"


	‚Ä¢	BOB BACK(n)
‚Üí Saves the background behind Bob #n (for easy erasing).
	‚Ä¢	BOB SPRITE(n)
‚Üí Converts Bob #n into a hardware sprite (if possible).

4Ô∏è‚É£ Removing Bobs
	‚Ä¢	BOB ERASE n
‚Üí Erases Bob #n from the screen.
	‚Ä¢	BOB OFF n
‚Üí Turns off Bob #n (removes it but keeps its data).

üïπÔ∏è WAIT VBL (Vertical Blank)
	‚Ä¢	WAIT VBL
‚Üí Pauses execution until the next screen refresh (VSync).
	‚Ä¢	Prevents screen tearing.
	‚Ä¢	Ensures smooth animation.
	‚Ä¢	Essential when moving Bobs or scrolling.

Example:
DO
    BOB X(1) = MOUSE X
    BOB Y(1) = MOUSE Y
    WAIT VBL
LOOP
