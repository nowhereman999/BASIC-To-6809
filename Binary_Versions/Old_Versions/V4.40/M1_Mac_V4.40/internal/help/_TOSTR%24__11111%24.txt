{{QBDLDATE:02-23-2025}}
{{QBDLTIME:17:43:14}}
{{DISPLAYTITLE:_TOSTR$}}
The '''_TOSTR$''' function returns the [[STRING]] representation of a numerical value. It's a successor of the legacy [[STR$]] function.


{{PageSyntax}}
: result$ = [[_TOSTR$]]({{Parameter|value}}[, {{Parameter|digits}}])


{{PageParameters}}
* {{Parameter|value}} is any [[Variable Types|numerical type]] value to convert, literal or variable.
* {{Parameter|digits}} is optional, if given it determines the maximum number of significant digits to convert for floating point values.
** This argument has no effect for integer values and is silently ignored, if given.
** For [[SINGLE]] values 1-7 digits are possible, for [[DOUBLE]] values 1-16 digits and for [[_FLOAT]] values 1-19 digits.
** Digit numbers exceeding the possible range are clipped to either the minimum or maximum possible.
** Negative digit numbers will cause an [[ERROR Codes|Illegal function call]] error.
** The digits exceeding the given maximum are not simply cut off, but rounded to the final position converted. If rounding results into a trailing ''zero(0)'', then it is omitted.


{{PageDescription}}
* Different from the legacy [[STR$]] this function will not add a leading space to positive values, hence you can waive to the usual trimming using [[LTRIM$]] or [[_TRIM$]].
* While the legacy [[STR$]] can only handle [[_FLOAT]] values as long as they not exceed the [[DOUBLE]] range, this function supports the full [[_FLOAT]] range.


{{PageAvailability}}
<!-- QB64 = a version or none, QBPE = a version or all, Platforms = yes or no -->
<gallery widths="48px" heights="48px" mode="nolines">
File:Qb64.png|'''none'''
File:Qbpe.png|'''v4.0.0'''
File:Apix.png
File:Win.png|'''yes'''
File:Lnx.png|'''yes'''
File:Osx.png|'''yes'''
</gallery>
<!-- additional availability notes go below here -->


{{PageExamples}}
; Example 1: Showing the minimum and maximum of different floating point types.
{{CodeStart}}
{{Text|<nowiki>'min/max values for SINGLE, DOUBLE and _FLOAT</nowiki>|#919191}}
smi! = {{Text|-3.402823E|#F580B1}}+{{Text|38|#F580B1}}
smf! = {{Text|1.175494E|#F580B1}}-{{Text|38|#F580B1}}
sma! = {{Text|3.402823E|#F580B1}}+{{Text|38|#F580B1}}
dmi# = {{Text|-1.797693134862315D|#F580B1}}+{{Text|308|#F580B1}}
dmf# = {{Text|2.225073858507201D|#F580B1}}-{{Text|308|#F580B1}}
dma# = {{Text|1.797693134862315D|#F580B1}}+{{Text|308|#F580B1}}
fmi## = {{Text|-1.189731495357231765F|#F580B1}}+{{Text|4932|#F580B1}}
fmf## = {{Text|3.362103143112093506F|#F580B1}}-{{Text|4932|#F580B1}}
fma## = {{Text|1.189731495357231765F|#F580B1}}+{{Text|4932|#F580B1}}

{{Cl|PRINT}} {{Text|<nowiki>"Values enclosed by () to show there's no leading/trailing space."</nowiki>|#FFB100}}
{{Cl|PRINT}}
{{Cl|PRINT}} {{Text|<nowiki>"min.   SINGLE: ("</nowiki>|#FFB100}}; {{Cl|_TOSTR$}}(smi!); {{Text|<nowiki>")"</nowiki>|#FFB100}}
{{Cl|PRINT}} {{Text|<nowiki>"min. fraction: ("</nowiki>|#FFB100}}; {{Cl|_TOSTR$}}(smf!); {{Text|<nowiki>")"</nowiki>|#FFB100}}
{{Cl|PRINT}} {{Text|<nowiki>"max.   SINGLE: ("</nowiki>|#FFB100}}; {{Cl|_TOSTR$}}(sma!); {{Text|<nowiki>")"</nowiki>|#FFB100}}
{{Cl|PRINT}}
{{Cl|PRINT}} {{Text|<nowiki>"min.   DOUBLE: ("</nowiki>|#FFB100}}; {{Cl|_TOSTR$}}(dmi#); {{Text|<nowiki>")"</nowiki>|#FFB100}}
{{Cl|PRINT}} {{Text|<nowiki>"min. fraction: ("</nowiki>|#FFB100}}; {{Cl|_TOSTR$}}(dmf#); {{Text|<nowiki>")"</nowiki>|#FFB100}}
{{Cl|PRINT}} {{Text|<nowiki>"max.   DOUBLE: ("</nowiki>|#FFB100}}; {{Cl|_TOSTR$}}(dma#); {{Text|<nowiki>")"</nowiki>|#FFB100}}
{{Cl|PRINT}}
{{Cl|PRINT}} {{Text|<nowiki>"min.   _FLOAT: ("</nowiki>|#FFB100}}; {{Cl|_TOSTR$}}(fmi##); {{Text|<nowiki>")"</nowiki>|#FFB100}}
{{Cl|PRINT}} {{Text|<nowiki>"min. fraction: ("</nowiki>|#FFB100}}; {{Cl|_TOSTR$}}(fmf##); {{Text|<nowiki>")"</nowiki>|#FFB100}}
{{Cl|PRINT}} {{Text|<nowiki>"max.   _FLOAT: ("</nowiki>|#FFB100}}; {{Cl|_TOSTR$}}(fma##); {{Text|<nowiki>")"</nowiki>|#FFB100}}

{{Cl|END}}
{{CodeEnd}}
{{OutputStart}}
Values enclosed by () to show there's no leading/trailing space.

min.   SINGLE: (-3.402823E+38)
min. fraction: (1.175494E-38)
max.   SINGLE: (3.402823E+38)

min.   DOUBLE: (-1.797693134862315D+308)
min. fraction: (2.225073858507201D-308)
max.   DOUBLE: (1.797693134862315D+308)

min.   _FLOAT: (-1.189731495357231765F+4932)
min. fraction: (3.362103143112093506F-4932)
max.   _FLOAT: (1.189731495357231765F+4932)
{{OutputEnd}}

----

; Example 2: Showing how the optional {{Parameter|digits}} argument affects the result.
{{CodeStart}}
num## = {{Cl|_PI}}({{Text|10|#F580B1}}): typ$ = {{Text|<nowiki>"_FLOAT"</nowiki>|#FFB100}}: mi% = {{Text|1|#F580B1}}: ma% = {{Text|19|#F580B1}}

{{Cl|PRINT}} {{Text|<nowiki>"Printing _PI(10) as "</nowiki>|#FFB100}}; typ$; {{Text|<nowiki>":"</nowiki>|#FFB100}}
{{Cl|PRINT}} {{Text|<nowiki>"  default:  "</nowiki>|#FFB100}}; {{Cl|_TOSTR$}}(num##)
{{Cl|FOR}} x% = {{Text|0|#F580B1}} {{Cl|TO}} {{Text|20|#F580B1}}
    {{Cl|PRINT USING}} {{Text|<nowiki>"## digits:  "</nowiki>|#FFB100}}; x%;
    num$ = {{Cl|_TOSTR$}}(num##, x%)
    {{Cl|PRINT}} num$; {{Cl|SPC}}(ma% + {{Text|5|#F580B1}} - {{Cl|LEN}}(num$));
    {{Cl|IF}} x% < mi% {{Cl|THEN}}
        {{Cl|PRINT}} {{Text|<nowiki>"(forced to at least 1 digit)"</nowiki>|#FFB100}}
    {{Cl|ELSEIF}} x% > ma% {{Cl|THEN}}
        {{Cl|PRINT}} {{Text|<nowiki>"(cropped to max. digits for "</nowiki>|#FFB100}}; typ$; {{Text|<nowiki>")"</nowiki>|#FFB100}}
    {{Cl|ELSEIF}} x% > {{Text|1|#F580B1}} {{Cl|_ANDALSO}} {{Cl|INSTR}}(num$, {{Text|<nowiki>"."</nowiki>|#FFB100}}) > {{Text|0|#F580B1}} {{Cl|_ANDALSO}} {{Cl|LEN}}(num$) < x% + {{Text|1|#F580B1}} {{Cl|THEN}}
        {{Cl|PRINT}} {{Text|<nowiki>"(trailing zero (rounding) omitted)"</nowiki>|#FFB100}}
    {{Cl|ELSE}}
        {{Cl|PRINT}}
    {{Cl|END IF}}
{{Cl|NEXT}} x%

{{Cl|END}}
{{CodeEnd}}
{{OutputStart}}
Printing _PI(10) as _FLOAT:
  default:  31.41592653589793116
 0 digits:  3F+01                   (forced to at least 1 digit)
 1 digits:  3F+01                   
 2 digits:  31                      
 3 digits:  31.4                    
 4 digits:  31.42                   
 5 digits:  31.416                  
 6 digits:  31.4159                 
 7 digits:  31.41593                
 8 digits:  31.415927               
 9 digits:  31.4159265              
10 digits:  31.41592654             
11 digits:  31.415926536            
12 digits:  31.4159265359           
13 digits:  31.4159265359           (trailing zero (rounding) omitted)
14 digits:  31.415926535898         
15 digits:  31.4159265358979        
16 digits:  31.41592653589793       
17 digits:  31.415926535897931      
18 digits:  31.4159265358979312     
19 digits:  31.41592653589793116    
20 digits:  31.41592653589793116    (cropped to max. digits for _FLOAT)
{{OutputEnd}}


{{PageSeeAlso}}
* [[VAL]], [[STR$]]
* [[_BIN$]], [[HEX$]], [[OCT$]]


{{PageNavigation}}
