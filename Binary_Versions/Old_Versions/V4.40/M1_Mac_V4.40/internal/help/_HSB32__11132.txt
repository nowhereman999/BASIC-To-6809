{{QBDLDATE:02-23-2025}}
{{QBDLTIME:17:41:36}}
{{DISPLAYTITLE:_HSB32}}
The '''_HSB32''' function specifies a color using the [https://www.learnui.design/blog/the-hsb-color-system-practicioners-primer.html HSB colorspace] and returns the 32-bit ''ARGB'' color value representing the color with the specified hue, saturation and brightness.


{{PageSyntax}}
: {{Parameter|color32value~&}} = [[_HSB32]]({{Parameter|hue#}}, {{Parameter|saturation#}}, {{Parameter|brightness#}})


{{PageParameters}}
* {{Parameter|hue#}} specifies the hue [[DOUBLE]] of the desired color from 0 to 360 degrees.
** The color wheel starts with red(0), turns to yellow(60), green(120), cyan(180), blue(240), magenta(300) to red(360) again.
** Mixed colors can be build by specifying values between the 6 base color angles.
* {{Parameter|saturation#}} specifies the saturation [[DOUBLE]] of the desired color from 0 to 100 percent.
** 100% is the richest color possible, as closer the value comes to 0% as more faded is the color, ending at dull gray.
** The intensity of the gray (i.e. black >> darkgray >> midgray >> lightgray >> white) depends on the given {{Parameter|brightness#}} value.
* {{Parameter|brightness#}} specifies the brightness [[DOUBLE]] of the desired color from 0 to 100 percent.
** 100% is the brightest (highest intensity), as closer the value comes to 0% as darker is the color, always ending in black regardless of the given {{Parameter|hue#}} and {{Parameter|saturation#}}.


{{PageDescription}}
* The value returned is always a 32-bit [[_UNSIGNED]] [[LONG]] ''ARGB'' color value, as is the [[POINT]] value.
* '''Return variable types must be [[_UNSIGNED]] [[LONG]] or [[LONG]], otherwise the resulting color may lose the [[_BLUE]] value.'''
* Parameter values outside the allowed ranges are clipped.
* All colors build with this function are opaque (full alpha), i.e. it returns [[_UNSIGNED]] [[LONG]] 32-bit hexadecimal values from '''&HFF{{Text|00|red}}{{Text|00|green}}{{Text|00|blue}}''' to '''&HFF{{Text|FF|red}}{{Text|FF|green}}{{Text|FF|blue}}'''.
* Use [[_HSBA32]] if you also need control over the alpha channel.
* When ([[_UNSIGNED]]) [[LONG]] values are [[PUT]] to file, the ''ARGB'' values become ''BGRA''. Use [[LEFT$]]([[MKL$]]({{Parameter|color32value~&}}), 3) to place 3 colors.
;Naming differences
:* The HSB (B=Brightness) colorspace is also known as HSV (V=Value) and sometimes even called HSI (I=Intensity), but that's all just different names for the same thing.
:* However, this function is not suitable for the HSL (L=Lightness) colorspace, which is widely used in the Web/CSS.
;Precision drawbacks
:* When converting between colorspaces, rounding errors can occur.
:* While the HSB colorspace has virtually infinite precision using floating point values, RGB is limited to 8-bit integers (0-255) only, which can lead to quantization errors.
:* In fact, not all colors in HSB can be accurately represented in RGB, but the opposite is possible.
:* It can be guaranteed, that the [[_HUE32]], [[_SATURATION32]] and [[_BRIGHTNESS32]] values retrieved from any arbitrary RGB color will reproduce the exact same RGB color when passed back through [[_HSB32]].


{{PageAvailability}}
<!-- QB64 = a version or none, QBPE = a version or all, Platforms = yes or no -->
<gallery widths="48px" heights="48px" mode="nolines">
File:Qb64.png|'''none'''
File:Qbpe.png|'''v4.0.0'''
File:Apix.png
File:Win.png|'''yes'''
File:Lnx.png|'''yes'''
File:Osx.png|'''yes'''
</gallery>
<!-- additional availability notes go below here -->


{{PageExamples}}
;Example 1: Drawing a color wheel by looping through hue and saturation.
{{CodeStart}}
{{Cl|SCREEN}} {{Cl|_NEWIMAGE}}({{Text|640|#F580B1}}, {{Text|480|#F580B1}}, {{Text|32|#F580B1}})

{{Cl|FOR}} ang# = {{Text|0|#F580B1}} {{Cl|TO}} {{Text|360|#F580B1}} {{Cl|STEP}} {{Text|0.25|#F580B1}}
    {{Cl|FOR}} rad# = {{Text|0|#F580B1}} {{Cl|TO}} {{Text|200|#F580B1}} {{Cl|STEP}} {{Text|0.25|#F580B1}}
        x% = rad# * {{Cl|COS}}({{Cl|_D2R}}(ang#))
        y% = rad# * {{Cl|SIN}}({{Cl|_D2R}}(ang#))
        {{Cl|PSET}} ({{Text|320|#F580B1}} + x%, {{Text|240|#F580B1}} - y%), {{Cl|_HSB32}}(ang#, rad# / {{Text|2|#F580B1}}, {{Text|100|#F580B1}})
    {{Cl|NEXT}} rad#
{{Cl|NEXT}} ang#

{{Cl|END}}
{{CodeEnd}}

----

;Example 2: Drawing a 3D model of the HSB colorspace with a cut to see inside.
{{CodeStart}}
{{Cl|SCREEN}} {{Cl|_NEWIMAGE}}({{Text|640|#F580B1}}, {{Text|480|#F580B1}}, {{Text|32|#F580B1}})

{{Cl|FOR}} hei# = {{Text|0|#F580B1}} {{Cl|TO}} {{Text|200|#F580B1}} {{Cl|STEP}} {{Text|5|#F580B1}}
    {{Cl|FOR}} ang# = {{Text|5|#F580B1}} {{Cl|TO}} {{Text|285|#F580B1}} {{Cl|STEP}} {{Text|0.25|#F580B1}}
        {{Cl|FOR}} rad# = {{Text|0|#F580B1}} {{Cl|TO}} {{Text|200|#F580B1}} {{Cl|STEP}} {{Text|1|#F580B1}}
            x% = rad# * {{Cl|COS}}({{Cl|_D2R}}(ang#))
            y% = rad# * {{Cl|SIN}}({{Cl|_D2R}}(ang#))
            z% = hei#
            {{Text|XYfrom3D|#55FF55}} x%, y%, z%
            {{Cl|PSET}} ({{Text|330|#F580B1}} + x%, -z% + {{Text|340|#F580B1}}), {{Cl|_HSB32}}(ang#, rad# / {{Text|2|#F580B1}}, hei# / {{Text|2|#F580B1}})
            {{Cl|IF}} rad# = {{Text|0|#F580B1}} {{Cl|_ANDALSO}} (hei# = {{Text|0|#F580B1}} {{Cl|OR (boolean)|OR}} hei# = {{Text|200|#F580B1}}) {{Cl|THEN}}
                {{Cl|IF}} hei# = {{Text|0|#F580B1}} {{Cl|THEN}}
                    {{Cl|IF}} ang# = {{Text|5|#F580B1}} {{Cl|THEN}} bmpx% = {{Text|330|#F580B1}} + x%: bmpy% = -z% + {{Text|340|#F580B1}}
                {{Cl|ELSE}}
                    {{Cl|IF}} ang# = {{Text|5|#F580B1}} {{Cl|THEN}} tmpx% = {{Text|330|#F580B1}} + x%: tmpy% = -z% + {{Text|340|#F580B1}}
                {{Cl|END IF}}
            {{Cl|ELSEIF}} rad# = {{Text|200|#F580B1}} {{Cl|_ANDALSO}} (hei# = {{Text|0|#F580B1}} {{Cl|OR (boolean)|OR}} hei# = {{Text|200|#F580B1}}) {{Cl|THEN}}
                {{Cl|PSET}} ({{Text|330|#F580B1}} + x%, -z% + {{Text|340|#F580B1}}), {{Text|&HFFFFFFFF|#F580B1}}
                {{Cl|IF}} hei# = {{Text|0|#F580B1}} {{Cl|THEN}}
                    {{Cl|IF}} ang# = {{Text|5|#F580B1}} {{Cl|THEN}} bspx% = {{Text|330|#F580B1}} + x%: bspy% = -z% + {{Text|340|#F580B1}}
                    {{Cl|IF}} ang# = {{Text|285|#F580B1}} {{Cl|THEN}} bepx% = {{Text|330|#F580B1}} + x%: bepy% = -z% + {{Text|340|#F580B1}}
                {{Cl|ELSE}}
                    {{Cl|IF}} ang# = {{Text|5|#F580B1}} {{Cl|THEN}} tspx% = {{Text|330|#F580B1}} + x%: tspy% = -z% + {{Text|340|#F580B1}}
                    {{Cl|IF}} ang# = {{Text|285|#F580B1}} {{Cl|THEN}} tepx% = {{Text|330|#F580B1}} + x%: tepy% = -z% + {{Text|340|#F580B1}}
                {{Cl|END IF}}
            {{Cl|END IF}}
        {{Cl|NEXT}} rad#
    {{Cl|NEXT}} ang#
{{Cl|NEXT}} hei#
{{Cl|LINE}} (bspx%, bspy%)-(bmpx%, bmpy%), {{Text|&HFFFFFFFF|#F580B1}}
{{Cl|LINE}} (bmpx%, bmpy%)-(bepx%, bepy%), {{Text|&HFFFFFFFF|#F580B1}}
{{Cl|LINE}} (tspx%, tspy%)-(tmpx%, tmpy%), {{Text|&HFFFFFFFF|#F580B1}}
{{Cl|LINE}} (tmpx%, tmpy%)-(tepx%, tepy%), {{Text|&HFFFFFFFF|#F580B1}}
{{Cl|LINE}} (bspx%, bspy%)-(tspx%, tspy%), {{Text|&HFFFFFFFF|#F580B1}}
{{Cl|LINE}} (bmpx%, bmpy%)-(tmpx%, tmpy%), {{Text|&HFFFFFFFF|#F580B1}}
{{Cl|LINE}} (bepx%, bepy%)-(tepx%, tepy%), {{Text|&HFFFFFFFF|#F580B1}}
{{Cl|END}}

{{Cl|SUB}} {{Text|XYfrom3D|#55FF55}} (x%, y%, z%)
x% = (x% + (y% * {{Text|.5|#F580B1}}))
z% = (z% + (y% * {{Text|.5|#F580B1}}))
{{Cl|END SUB}}
{{CodeEnd}}


{{PageSeeAlso}}
* [[_HSBA32]], [[_HUE32]]
* [[_SATURATION32]], [[_BRIGHTNESS32]]
* [[_RGBA32]], [[_RGB]], [[_RGBA]]
* [[_RED32]], [[_GREEN32]], [[_BLUE32]]
* [[_PALETTECOLOR]]
* [[HEX$ 32 Bit Values]]
* [[SaveImage SUB]]
* [https://www.w3schools.com/colors/colors_names.asp Hexadecimal Color Values]


{{PageNavigation}}
